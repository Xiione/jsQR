{"version":3,"file":"decoder.js","sources":["../../src/decoder/decoder.ts"],"sourcesContent":["import { BitMatrix } from \"../BitMatrix\";\nimport { Point } from \"../Point\";\nimport { decode as decodeData, DecodedQR } from \"./decodeData\";\nimport {\n  decodeWASM as rsDecode,\n  decodeJS as rsDecodeExpected,\n} from \"./reedsolomon\";\nimport { Version, VERSIONS } from \"./version\";\n\n// tslint:disable:no-bitwise\nfunction numBitsDiffering(x: number, y: number) {\n  let z = x ^ y;\n  let bitCount = 0;\n  while (z) {\n    bitCount++;\n    z &= z - 1;\n  }\n  return bitCount;\n}\n\nfunction pushBit(bit: any, byte: number) {\n  return (byte << 1) | bit;\n}\n// tslint:enable:no-bitwise\n\nexport const FORMAT_INFO_TABLE: FormatInformationWithBits[] = [\n  { bits: 0x5412, formatInfo: { errorCorrectionLevel: 1, dataMask: 0 } },\n  { bits: 0x5125, formatInfo: { errorCorrectionLevel: 1, dataMask: 1 } },\n  { bits: 0x5e7c, formatInfo: { errorCorrectionLevel: 1, dataMask: 2 } },\n  { bits: 0x5b4b, formatInfo: { errorCorrectionLevel: 1, dataMask: 3 } },\n  { bits: 0x45f9, formatInfo: { errorCorrectionLevel: 1, dataMask: 4 } },\n  { bits: 0x40ce, formatInfo: { errorCorrectionLevel: 1, dataMask: 5 } },\n  { bits: 0x4f97, formatInfo: { errorCorrectionLevel: 1, dataMask: 6 } },\n  { bits: 0x4aa0, formatInfo: { errorCorrectionLevel: 1, dataMask: 7 } },\n  { bits: 0x77c4, formatInfo: { errorCorrectionLevel: 0, dataMask: 0 } },\n  { bits: 0x72f3, formatInfo: { errorCorrectionLevel: 0, dataMask: 1 } },\n  { bits: 0x7daa, formatInfo: { errorCorrectionLevel: 0, dataMask: 2 } },\n  { bits: 0x789d, formatInfo: { errorCorrectionLevel: 0, dataMask: 3 } },\n  { bits: 0x662f, formatInfo: { errorCorrectionLevel: 0, dataMask: 4 } },\n  { bits: 0x6318, formatInfo: { errorCorrectionLevel: 0, dataMask: 5 } },\n  { bits: 0x6c41, formatInfo: { errorCorrectionLevel: 0, dataMask: 6 } },\n  { bits: 0x6976, formatInfo: { errorCorrectionLevel: 0, dataMask: 7 } },\n  { bits: 0x1689, formatInfo: { errorCorrectionLevel: 3, dataMask: 0 } },\n  { bits: 0x13be, formatInfo: { errorCorrectionLevel: 3, dataMask: 1 } },\n  { bits: 0x1ce7, formatInfo: { errorCorrectionLevel: 3, dataMask: 2 } },\n  { bits: 0x19d0, formatInfo: { errorCorrectionLevel: 3, dataMask: 3 } },\n  { bits: 0x0762, formatInfo: { errorCorrectionLevel: 3, dataMask: 4 } },\n  { bits: 0x0255, formatInfo: { errorCorrectionLevel: 3, dataMask: 5 } },\n  { bits: 0x0d0c, formatInfo: { errorCorrectionLevel: 3, dataMask: 6 } },\n  { bits: 0x083b, formatInfo: { errorCorrectionLevel: 3, dataMask: 7 } },\n  { bits: 0x355f, formatInfo: { errorCorrectionLevel: 2, dataMask: 0 } },\n  { bits: 0x3068, formatInfo: { errorCorrectionLevel: 2, dataMask: 1 } },\n  { bits: 0x3f31, formatInfo: { errorCorrectionLevel: 2, dataMask: 2 } },\n  { bits: 0x3a06, formatInfo: { errorCorrectionLevel: 2, dataMask: 3 } },\n  { bits: 0x24b4, formatInfo: { errorCorrectionLevel: 2, dataMask: 4 } },\n  { bits: 0x2183, formatInfo: { errorCorrectionLevel: 2, dataMask: 5 } },\n  { bits: 0x2eda, formatInfo: { errorCorrectionLevel: 2, dataMask: 6 } },\n  { bits: 0x2bed, formatInfo: { errorCorrectionLevel: 2, dataMask: 7 } },\n];\n\nexport const DATA_MASKS = [\n  (p: Point) => (p.y + p.x) % 2 === 0,\n  (p: Point) => p.y % 2 === 0,\n  (p: Point) => p.x % 3 === 0,\n  (p: Point) => (p.y + p.x) % 3 === 0,\n  (p: Point) => (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0,\n  (p: Point) => ((p.x * p.y) % 2) + ((p.x * p.y) % 3) === 0,\n  (p: Point) => (((p.y * p.x) % 2) + ((p.y * p.x) % 3)) % 2 === 0,\n  (p: Point) => (((p.y + p.x) % 2) + ((p.y * p.x) % 3)) % 2 === 0,\n];\n\nexport interface FormatInformation {\n  errorCorrectionLevel: number;\n  dataMask: number;\n}\n\ninterface FormatInformationWithBits {\n  bits: number;\n  formatInfo: FormatInformation;\n}\n\nexport interface DataBlock {\n  numDataCodewords: number;\n  codewords: number[];\n  codewordsCorrected: number[];\n}\n\nexport interface VersionResult {\n  // can be guessed instead of decoded\n  version: number;\n  topRightBestDiff: number;\n  bottomLeftBestDiff: number;\n}\n\nexport interface FormatResult {\n  format: FormatInformationWithBits | null;\n  topLeftBestDiff: number;\n  topRightBottomLeftBestDiff: number;\n}\n\nexport interface DecodeResult {\n  decodedQR: DecodedQR | null;\n  versionResult: VersionResult;\n  formatResult: FormatResult;\n  blockErrors: (number | null)[];\n}\n\nexport function buildFunctionPatternMask(version: Version): BitMatrix {\n  const dimension = 17 + 4 * version.versionNumber;\n  const matrix = BitMatrix.createEmpty(dimension, dimension);\n\n  matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format\n  matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format\n  matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format\n\n  // Alignment patterns\n  for (const x of version.alignmentPatternCenters) {\n    for (const y of version.alignmentPatternCenters) {\n      if (\n        !(\n          (x === 6 && y === 6) ||\n          (x === 6 && y === dimension - 7) ||\n          (x === dimension - 7 && y === 6)\n        )\n      ) {\n        matrix.setRegion(x - 2, y - 2, 5, 5, true);\n      }\n    }\n  }\n\n  matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern\n  matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern\n\n  if (version.versionNumber > 6) {\n    matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right\n    matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left\n  }\n\n  return matrix;\n}\n\nexport function readCodewords(\n  matrix: BitMatrix,\n  version: Version,\n  formatInfo: FormatInformation,\n) {\n  const dataMask = DATA_MASKS[formatInfo.dataMask];\n  const dimension = matrix.height;\n\n  const functionPatternMask = buildFunctionPatternMask(version);\n\n  const codewords: number[] = [];\n  let currentByte = 0;\n  let bitsRead = 0;\n\n  // Read columns in pairs, from right to left\n  let readingUp = true;\n  for (let columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2) {\n    if (columnIndex === 6) {\n      // Skip whole column with vertical alignment pattern;\n      columnIndex--;\n    }\n    for (let i = 0; i < dimension; i++) {\n      const y = readingUp ? dimension - 1 - i : i;\n      for (let columnOffset = 0; columnOffset < 2; columnOffset++) {\n        const x = columnIndex - columnOffset;\n        if (!functionPatternMask.get(x, y)) {\n          bitsRead++;\n          let bit = matrix.get(x, y);\n          if (dataMask({ y, x })) {\n            bit = !bit;\n          }\n          currentByte = pushBit(bit, currentByte);\n          if (bitsRead === 8) {\n            // Whole bytes\n            codewords.push(currentByte);\n            bitsRead = 0;\n            currentByte = 0;\n          }\n        }\n      }\n    }\n    readingUp = !readingUp;\n  }\n  return codewords;\n}\n\nexport function readVersion(matrix: BitMatrix): VersionResult {\n  const dimension = matrix.height;\n\n  const provisionalVersion = Math.floor((dimension - 17) / 4);\n  if (provisionalVersion <= 6) {\n    // 6 and under don't have version info in the QR code\n    return {\n      topRightBestDiff: null,\n      bottomLeftBestDiff: null,\n      version: provisionalVersion,\n    };\n  }\n\n  let topRightVersionBits = 0;\n  for (let y = 5; y >= 0; y--) {\n    for (let x = dimension - 9; x >= dimension - 11; x--) {\n      topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);\n    }\n  }\n\n  let bottomLeftVersionBits = 0;\n  for (let x = 5; x >= 0; x--) {\n    for (let y = dimension - 9; y >= dimension - 11; y--) {\n      bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);\n    }\n  }\n\n  let bestDifference = Infinity;\n  let topRightBestDiff = Infinity;\n  let bottomLeftBestDiff = Infinity;\n  let bestVersion: number;\n  for (let version = 1; version <= VERSIONS.length; version++) {\n    const cur = VERSIONS[version - 1];\n    if (\n      cur.infoBits === topRightVersionBits ||\n      cur.infoBits === bottomLeftVersionBits\n    ) {\n      topRightBestDiff = Math.min(\n        topRightBestDiff,\n        numBitsDiffering(topRightVersionBits, cur.infoBits),\n      );\n      bottomLeftBestDiff = Math.min(\n        bottomLeftBestDiff,\n        numBitsDiffering(bottomLeftVersionBits, cur.infoBits),\n      );\n      return {\n        version,\n        topRightBestDiff,\n        bottomLeftBestDiff\n      };\n    }\n\n    let difference = numBitsDiffering(topRightVersionBits, cur.infoBits);\n    topRightBestDiff = Math.min(topRightBestDiff, difference);\n    if (difference < bestDifference) {\n      bestVersion = version;\n      bestDifference = difference;\n    }\n\n    difference = numBitsDiffering(bottomLeftVersionBits, cur.infoBits);\n    bottomLeftBestDiff = Math.min(bottomLeftBestDiff, difference);\n    if (difference < bestDifference) {\n      bestVersion = version;\n      bestDifference = difference;\n    }\n  }\n  // We can tolerate up to 3 bits of error since no two version info codewords will\n  // differ in less than 8 bits.\n  if (bestDifference <= 3) {\n    return {\n      version: bestVersion,\n      topRightBestDiff,\n      bottomLeftBestDiff,\n    };\n  }\n  return {\n    version: provisionalVersion,\n    topRightBestDiff,\n    bottomLeftBestDiff,\n  };\n}\n\nexport function readFormatInformation(matrix: BitMatrix): FormatResult {\n  let topLeftFormatInfoBits = 0;\n  for (let x = 0; x <= 8; x++) {\n    if (x !== 6) {\n      // Skip timing pattern bit\n      topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);\n    }\n  }\n  for (let y = 7; y >= 0; y--) {\n    if (y !== 6) {\n      // Skip timing pattern bit\n      topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);\n    }\n  }\n\n  const dimension = matrix.height;\n  let topRightBottomLeftFormatInfoBits = 0;\n  for (let y = dimension - 1; y >= dimension - 7; y--) {\n    // bottom left\n    topRightBottomLeftFormatInfoBits = pushBit(\n      matrix.get(8, y),\n      topRightBottomLeftFormatInfoBits,\n    );\n  }\n  for (let x = dimension - 8; x < dimension; x++) {\n    // top right\n    topRightBottomLeftFormatInfoBits = pushBit(\n      matrix.get(x, 8),\n      topRightBottomLeftFormatInfoBits,\n    );\n  }\n\n  let bestDifference = Infinity;\n  let topLeftBestDiff = Infinity;\n  let topRightBottomLeftBestDiff = Infinity;\n  let bestFormatInfo = null;\n  for (const format of FORMAT_INFO_TABLE) {\n    if (\n      format.bits === topLeftFormatInfoBits ||\n      format.bits === topRightBottomLeftFormatInfoBits\n    ) {\n      topLeftBestDiff = Math.min(\n        topLeftBestDiff,\n        numBitsDiffering(topLeftFormatInfoBits, format.bits),\n      );\n      topRightBottomLeftBestDiff = Math.min(\n        topRightBottomLeftBestDiff,\n        numBitsDiffering(topRightBottomLeftFormatInfoBits, format.bits),\n      );\n      return {\n        format,\n        topLeftBestDiff,\n        topRightBottomLeftBestDiff,\n      };\n    }\n    let difference = numBitsDiffering(topLeftFormatInfoBits, format.bits);\n    topLeftBestDiff = Math.min(topLeftBestDiff, difference);\n    if (difference < bestDifference) {\n      bestFormatInfo = format;\n      bestDifference = difference;\n    }\n\n    difference = numBitsDiffering(\n      topRightBottomLeftFormatInfoBits,\n      format.bits,\n    );\n    topRightBottomLeftBestDiff = Math.min(\n      topRightBottomLeftBestDiff,\n      difference,\n    );\n    if (difference < bestDifference) {\n      bestFormatInfo = format;\n      bestDifference = difference;\n    }\n  }\n  // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match\n  if (bestDifference <= 3) {\n    return {\n      format: bestFormatInfo,\n      topLeftBestDiff,\n      topRightBottomLeftBestDiff,\n    };\n  }\n  return {\n    format: null,\n    topLeftBestDiff,\n    topRightBottomLeftBestDiff,\n  };\n}\n\nexport function getDataBlocks(\n  codewords: number[],\n  version: Version,\n  ecLevel: number,\n) {\n  const ecInfo = version.errorCorrectionLevels[ecLevel];\n  const dataBlocks: DataBlock[] = [];\n\n  let totalCodewords = 0;\n  ecInfo.ecBlocks.forEach((block) => {\n    for (let i = 0; i < block.numBlocks; i++) {\n      dataBlocks.push({\n        numDataCodewords: block.dataCodewordsPerBlock,\n        codewords: [],\n        codewordsCorrected: [],\n      });\n      totalCodewords +=\n        block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;\n    }\n  });\n\n  // In some cases the QR code will be malformed enough that we pull off more or less than we should.\n  // If we pull off less there's nothing we can do.\n  // If we pull off more we can safely truncate\n  if (!codewords || codewords.length < totalCodewords) {\n    return null;\n  }\n  codewords = codewords.slice(0, totalCodewords);\n\n  const shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;\n  // Pull codewords to fill the blocks up to the minimum size\n  for (let i = 0; i < shortBlockSize; i++) {\n    for (const dataBlock of dataBlocks) {\n      dataBlock.codewords.push(codewords.shift());\n    }\n  }\n\n  // If there are any large blocks, pull codewords to fill the last element of those\n  if (ecInfo.ecBlocks.length > 1) {\n    const smallBlockCount = ecInfo.ecBlocks[0].numBlocks;\n    const largeBlockCount = ecInfo.ecBlocks[1].numBlocks;\n    for (let i = 0; i < largeBlockCount; i++) {\n      dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());\n    }\n  }\n\n  // Add the rest of the codewords to the blocks. These are the error correction codewords.\n  while (codewords.length > 0) {\n    for (const dataBlock of dataBlocks) {\n      dataBlock.codewords.push(codewords.shift());\n    }\n  }\n\n  return dataBlocks;\n}\n\nfunction decodeMatrix(matrix: BitMatrix, doCorrection = true): DecodedQR {\n  const versionResult = readVersion(matrix);\n  const version = VERSIONS[versionResult.version - 1];\n  const formatResult = readFormatInformation(matrix);\n  // const decodeResult: DecodeResult = {\n  //   decodedQR: null,\n  //   versionResult,\n  //   formatResult,\n  //   blockErrors: [],\n  // };\n  if (!version) {\n    return null;\n  }\n  if (!formatResult.format) {\n    return null;\n  }\n\n  const codewords = readCodewords(\n    matrix,\n    version,\n    formatResult.format.formatInfo,\n  );\n  const dataBlocks = getDataBlocks(\n    codewords,\n    version,\n    formatResult.format.formatInfo.errorCorrectionLevel,\n  );\n  if (!dataBlocks) {\n    return null;\n  }\n  // decodeResult.blockErrors = new Array(dataBlocks.length).fill(null);\n\n  // Count total number of data bytes\n  const totalBytes = dataBlocks.reduce((a, b) => a + b.numDataCodewords, 0);\n  const resultBytes = new Uint8ClampedArray(totalBytes);\n\n  let resultIndex = 0;\n  let anyBlockFailed = false;\n  for (let i = 0; i < dataBlocks.length; i++) {\n    const dataBlock = dataBlocks[i];\n    const decodeRes = rsDecode(\n      dataBlock.codewords,\n      dataBlock.codewords.length - dataBlock.numDataCodewords,\n    );\n\n    // const bytesCorrected = rsDecodeExpected(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);\n    const bytesCorrected = decodeRes[\"bytesCorrected\"];\n    const errors = decodeRes[\"errors\"];\n    if (errors >= 0) {\n      // decodeResult.blockErrors[i] = errors;\n    }\n    if (!bytesCorrected) {\n      anyBlockFailed = true;\n      continue;\n    }\n\n    for (let i = 0; i < dataBlock.numDataCodewords; i++) {\n      resultBytes[resultIndex++] = bytesCorrected[\"get\"](i);\n      // resultBytes[resultIndex++] = bytesCorrected[i];\n    }\n    for (let i = 0; i < dataBlock.codewords.length; i++) {\n      dataBlock.codewordsCorrected.push(bytesCorrected[\"get\"](i));\n    }\n    bytesCorrected[\"delete\"]();\n  }\n  if (anyBlockFailed) {\n    // return decodeResult;\n    return null;\n  }\n\n  try {\n    const res = decodeData(resultBytes, version.versionNumber);\n    // patch fix for random erroneous successful scans, an empty result is\n    // useless anyways\n    if (res && res.text) {\n      res.ecLevel = formatResult.format.formatInfo.errorCorrectionLevel;\n      res.dataMask = formatResult.format.formatInfo.dataMask;\n      if (doCorrection) {\n        correctMatrix(matrix, version, formatResult.format, dataBlocks);\n      }\n      // decodeResult.decodedQR = res;\n      return res;\n    } else {\n      return null;\n    }\n  } catch {\n    return null;\n  }\n}\n\nexport function decode(matrix: BitMatrix): DecodedQR {\n  if (matrix == null) {\n    return null;\n  }\n  const result = decodeMatrix(matrix);\n  if (result) {\n    return result;\n  }\n  // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.\n  matrix.mirror();\n\n  const res = decodeMatrix(matrix);\n  return res ? { ...res, mirrored: true } : null;\n}\n\nfunction correctMatrix(\n  matrix: BitMatrix,\n  version: Version,\n  format: FormatInformationWithBits,\n  dataBlocks: DataBlock[],\n) {\n  const dimension = matrix.width;\n\n  // version info if applicable\n  if (version.versionNumber + 1 > 6) {\n    // top right\n    for (let y = 0, i = 0; y <= 5; y++) {\n      for (let x = dimension - 11; x <= dimension - 9; x++, i++) {\n        matrix.set(x, y, !!((version.infoBits >> i) & 1));\n      }\n    }\n    // bottom left\n    for (let x = 0, i = 0; x <= 5; x++) {\n      for (let y = dimension - 11; y <= dimension - 9; y++, i++) {\n        matrix.set(x, y, !!((version.infoBits >> i) & 1));\n      }\n    }\n  }\n\n  // format info\n  {\n    // top left\n    let i = 0;\n    for (let y = 0; y <= 7; y++) {\n      if (y !== 6) {\n        matrix.set(8, y, !!((format.bits >> i) & 1));\n        i++;\n      }\n    }\n    for (let x = 8; x >= 0; x--) {\n      if (x !== 6) {\n        matrix.set(x, 8, !!((format.bits >> i) & 1));\n        i++;\n      }\n    }\n  }\n\n  {\n    let i = 0;\n    for (let x = dimension - 1; x >= dimension - 8; x--, i++) {\n      // top right\n      matrix.set(x, 8, !!((format.bits >> i) & 1));\n    }\n    for (let y = dimension - 7; y <= dimension - 1; y++, i++) {\n      // bottom left\n      matrix.set(8, y, !!((format.bits >> i) & 1));\n    }\n  }\n\n  // function patterns\n  matrix.setRegion(0, 0, 8, 8, false); // top left separator\n  matrix.setRegion(0, 0, 7, 7, true); // top left finder outer ring\n  matrix.setRegion(1, 1, 5, 5, false); // top left finder gap\n  matrix.setRegion(2, 2, 3, 3, true); // top left finder center\n\n  matrix.setRegion(dimension - 8, 0, 8, 8, false); // top right separator\n  matrix.setRegion(dimension - 7, 0, 7, 7, true); // top right finder outer ring\n  matrix.setRegion(dimension - 6, 1, 5, 5, false); // and so forth...\n  matrix.setRegion(dimension - 5, 2, 3, 3, true);\n\n  matrix.setRegion(0, dimension - 8, 8, 8, false); // bottom left separator + finder\n  matrix.setRegion(0, dimension - 7, 7, 7, true);\n  matrix.setRegion(1, dimension - 6, 5, 5, false);\n  matrix.setRegion(2, dimension - 5, 3, 3, true);\n\n  for (let y = 9; y < 9 + dimension - 17; y++) {\n    matrix.set(6, y, y % 2 === 0); // Vertical timing pattern\n  }\n  for (let x = 9; x < 9 + dimension - 17; x++) {\n    matrix.set(x, 6, x % 2 === 0); // Horizontal timing pattern\n  }\n\n  // Alignment patterns\n  for (const x of version.alignmentPatternCenters) {\n    for (const y of version.alignmentPatternCenters) {\n      if (\n        !(\n          (x === 6 && y === 6) ||\n          (x === 6 && y === dimension - 7) ||\n          (x === dimension - 7 && y === 6)\n        )\n      ) {\n        matrix.setRegion(x - 2, y - 2, 5, 5, true);\n        matrix.setRegion(x - 1, y - 1, 3, 3, false);\n        matrix.set(x, y, true);\n      }\n    }\n  }\n\n  const codewords: number[] = [];\n  const dataBlockIdx: number[] = new Array(dataBlocks.length).fill(0);\n  let numDone = 0;\n\n  function collectCodewords(getLimit: (block: DataBlock) => number) {\n    numDone = 0;\n    while (numDone < dataBlocks.length) {\n      for (let i = 0; i < dataBlocks.length; i++) {\n        const j = dataBlockIdx[i];\n        if (j < getLimit(dataBlocks[i])) {\n          codewords.push(dataBlocks[i].codewordsCorrected[j]);\n          if (++dataBlockIdx[i] >= getLimit(dataBlocks[i])) numDone++;\n        }\n      }\n    }\n  }\n\n  // collect data codewords in original order\n  collectCodewords((block) => block.numDataCodewords);\n  // collect ec codewords\n  collectCodewords((block) => block.codewordsCorrected.length);\n\n  const dataMask = DATA_MASKS[format.formatInfo.dataMask];\n  const functionPatternMask = buildFunctionPatternMask(version);\n\n  let bytesRead = 0;\n  let bitsRead = 0;\n\n  let readingUp = true;\n  for (let columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2) {\n    if (columnIndex === 6) {\n      // Skip whole column with vertical alignment pattern;\n      columnIndex--;\n    }\n    for (let i = 0; i < dimension; i++) {\n      const y = readingUp ? dimension - 1 - i : i;\n      for (let columnOffset = 0; columnOffset < 2; columnOffset++) {\n        const x = columnIndex - columnOffset;\n        if (!functionPatternMask.get(x, y)) {\n          bitsRead++;\n          let bit =\n            bytesRead < codewords.length\n              ? !!((codewords[bytesRead] >> (8 - bitsRead)) & 1)\n              : false;\n          if (dataMask({ y, x })) {\n            bit = !bit;\n          }\n          matrix.set(x, y, bit);\n          if (bitsRead === 8) {\n            // Whole bytes\n            bytesRead++;\n            bitsRead = 0;\n          }\n        }\n      }\n    }\n    readingUp = !readingUp;\n  }\n  return codewords;\n}\n"],"names":["rsDecode","decodeData"],"mappings":";;;;;AASA;AACA,SAAS,gBAAgB,CAAC,CAAS,EAAE,CAAS,EAAA;AAC5C,IAAA,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACd,IAAI,QAAQ,GAAG,CAAC,CAAC;AACjB,IAAA,OAAO,CAAC,EAAE;AACR,QAAA,QAAQ,EAAE,CAAC;AACX,QAAA,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACZ,KAAA;AACD,IAAA,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,SAAS,OAAO,CAAC,GAAQ,EAAE,IAAY,EAAA;AACrC,IAAA,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC;AAC3B,CAAC;AACD;AAEa,MAAA,iBAAiB,GAAgC;AAC5D,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;AACtE,IAAA,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE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"}