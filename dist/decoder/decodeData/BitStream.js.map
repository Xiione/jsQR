{"version":3,"file":"BitStream.js","sources":["../../../src/decoder/decodeData/BitStream.ts"],"sourcesContent":["// tslint:disable:no-bitwise\n\nimport { Mode } from \".\";\n\nexport enum StreamMapping {\n  Padding = -1,\n  Mode = -2,\n  CharacterCountInfo = -3,\n  // structured append\n  SACurrentSequence = -4,\n  SATotalSequence = -5,\n  SAParity = -6,\n  ECIData = -7,\n}\n\nexport interface StreamInfo {\n  length: number;\n  mapping?: StreamMapping;\n  charIndex?: number;\n  mode: Mode;\n}\n\nexport class BitStream {\n  private bytes: Uint8ClampedArray;\n  private byteOffset: number = 0;\n  private bitOffset: number = 0;\n\n  private charsRead: number = 0;\n  // {start bit, [length, mapping]}\n  private mappings: Map<number, StreamInfo> = null;\n\n  constructor(bytes: Uint8ClampedArray, doMapping = true) {\n    this.bytes = bytes;\n    if (doMapping) {\n      this.mappings = new Map<number, StreamInfo>();\n    }\n  }\n\n  public readBits(\n    numBits: number,\n    mode: Mode,\n    mapping?: StreamMapping,\n  ): number {\n    if (numBits < 1 || numBits > 32 || numBits > this.available()) {\n      throw new Error(\"Cannot read \" + numBits.toString() + \" bits\");\n    }\n\n    this.mappings?.set(this.byteOffset * 8 + this.bitOffset, {\n      length: numBits,\n      mapping,\n      charIndex: mapping ? undefined : this.charsRead++,\n      mode,\n    });\n\n    let result = 0;\n    // First, read remainder from current byte\n    if (this.bitOffset > 0) {\n      const bitsLeft = 8 - this.bitOffset;\n      const toRead = numBits < bitsLeft ? numBits : bitsLeft;\n      const bitsToNotRead = bitsLeft - toRead;\n      const mask = (0xff >> (8 - toRead)) << bitsToNotRead;\n      result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;\n      numBits -= toRead;\n      this.bitOffset += toRead;\n      if (this.bitOffset === 8) {\n        this.bitOffset = 0;\n        this.byteOffset++;\n      }\n    }\n\n    // Next read whole bytes\n    if (numBits > 0) {\n      while (numBits >= 8) {\n        result = (result << 8) | (this.bytes[this.byteOffset] & 0xff);\n        this.byteOffset++;\n        numBits -= 8;\n      }\n\n      // Finally read a partial byte\n      if (numBits > 0) {\n        const bitsToNotRead = 8 - numBits;\n        const mask = (0xff >> bitsToNotRead) << bitsToNotRead;\n        result =\n          (result << numBits) |\n          ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);\n        this.bitOffset += numBits;\n      }\n    }\n    return result;\n  }\n\n  public available(): number {\n    return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n  }\n\n  public getMappings() {\n    return this.mappings;\n  }\n}\n"],"names":[],"mappings":"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"}