{"version":3,"file":"index.js","sources":["../../../src/decoder/decodeData/BitStream.ts","../../../src/decoder/decodeData/index.ts"],"sourcesContent":["// tslint:disable:no-bitwise\n\nimport { Mode } from \".\";\n\nexport enum StreamMapping {\n  Padding = -1,\n  Mode = -2,\n  CharacterCountInfo = -3,\n  // structured append\n  SACurrentSequence = -4,\n  SATotalSequence = -5,\n  SAParity = -6,\n  ECIData = -7,\n}\n\nexport interface StreamInfo {\n  length: number;\n  mapping?: StreamMapping;\n  charIndex?: number;\n  mode: Mode;\n}\n\nexport class BitStream {\n  private bytes: Uint8ClampedArray;\n  private byteOffset: number = 0;\n  private bitOffset: number = 0;\n\n  private charsRead: number = 0;\n  // {start bit, [length, mapping]}\n  private mappings: Map<number, StreamInfo> = new Map();\n\n  constructor(bytes: Uint8ClampedArray) {\n    this.bytes = bytes;\n  }\n\n  public readBits(\n    numBits: number,\n    mode: Mode,\n    mapping?: StreamMapping,\n  ): number {\n    if (numBits < 1 || numBits > 32 || numBits > this.available()) {\n      throw new Error(\"Cannot read \" + numBits.toString() + \" bits\");\n    }\n\n    this.mappings.set(this.byteOffset * 8 + this.bitOffset, {\n      length: numBits,\n      mapping,\n      charIndex: mapping ? undefined : this.charsRead++,\n      mode,\n    });\n\n    let result = 0;\n    // First, read remainder from current byte\n    if (this.bitOffset > 0) {\n      const bitsLeft = 8 - this.bitOffset;\n      const toRead = numBits < bitsLeft ? numBits : bitsLeft;\n      const bitsToNotRead = bitsLeft - toRead;\n      const mask = (0xff >> (8 - toRead)) << bitsToNotRead;\n      result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;\n      numBits -= toRead;\n      this.bitOffset += toRead;\n      if (this.bitOffset === 8) {\n        this.bitOffset = 0;\n        this.byteOffset++;\n      }\n    }\n\n    // Next read whole bytes\n    if (numBits > 0) {\n      while (numBits >= 8) {\n        result = (result << 8) | (this.bytes[this.byteOffset] & 0xff);\n        this.byteOffset++;\n        numBits -= 8;\n      }\n\n      // Finally read a partial byte\n      if (numBits > 0) {\n        const bitsToNotRead = 8 - numBits;\n        const mask = (0xff >> bitsToNotRead) << bitsToNotRead;\n        result =\n          (result << numBits) |\n          ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);\n        this.bitOffset += numBits;\n      }\n    }\n    return result;\n  }\n\n  public available(): number {\n    return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n  }\n\n  public getMappings() {\n    return this.mappings;\n  }\n}\n","// tslint:disable:no-bitwise\nimport { BitStream, StreamInfo, StreamMapping } from \"./BitStream\";\n\nexport interface Chunk {\n  type: Mode;\n  text: string;\n}\n\nexport interface ByteChunk {\n  type: Mode.Byte | Mode.Kanji;\n  bytes: number[];\n}\n\nexport interface ECIChunk {\n  type: Mode.ECI;\n  assignmentNumber: number;\n}\n\nexport interface StructuredAppend {\n  type: Mode.StructuredAppend;\n  currentSequence: number;\n  totalSequence: number;\n  parity: number;\n}\n\nexport type Chunks = Array<Chunk | ByteChunk | ECIChunk | StructuredAppend>;\n\nexport interface DecodedQR {\n  text: string;\n  bytes: number[];\n  chunks: Chunks;\n  version: number;\n  mirrored: boolean;\n  ecLevel: number;\n  dataMask: number;\n  streamMappings: Map<number, StreamInfo>;\n}\n\nexport enum Mode {\n  Numeric = \"numeric\",\n  Alphanumeric = \"alphanumeric\",\n  Byte = \"byte\",\n  Kanji = \"kanji\",\n  ECI = \"eci\",\n  StructuredAppend = \"structuredappend\",\n  None = \"none\",\n}\n\nenum ModeByte {\n  Terminator = 0x0,\n  Numeric = 0x1,\n  Alphanumeric = 0x2,\n  Byte = 0x4,\n  Kanji = 0x8,\n  ECI = 0x7,\n  StructuredAppend = 0x3,\n  // FNC1FirstPosition = 0x5,\n  // FNC1SecondPosition = 0x9,\n}\n\nfunction decodeNumeric(stream: BitStream, size: number) {\n  const bytes: number[] = [];\n  let text = \"\";\n\n  const characterCountSize = [10, 12, 14][size];\n  let length = stream.readBits(\n    characterCountSize,\n    Mode.Numeric,\n    StreamMapping.CharacterCountInfo,\n  );\n  // Read digits in groups of 3\n  while (length >= 3) {\n    const num = stream.readBits(10, Mode.Numeric);\n    if (num >= 1000) {\n      throw new Error(\"Invalid numeric value above 999\");\n    }\n\n    const a = Math.floor(num / 100);\n    const b = Math.floor(num / 10) % 10;\n    const c = num % 10;\n\n    bytes.push(48 + a, 48 + b, 48 + c);\n    text += a.toString() + b.toString() + c.toString();\n    length -= 3;\n  }\n\n  // If the number of digits aren't a multiple of 3, the remaining digits are special cased.\n  if (length === 2) {\n    const num = stream.readBits(7, Mode.Numeric);\n    if (num >= 100) {\n      throw new Error(\"Invalid numeric value above 99\");\n    }\n\n    const a = Math.floor(num / 10);\n    const b = num % 10;\n\n    bytes.push(48 + a, 48 + b);\n    text += a.toString() + b.toString();\n  } else if (length === 1) {\n    const num = stream.readBits(4, Mode.Numeric);\n    if (num >= 10) {\n      throw new Error(\"Invalid numeric value above 9\");\n    }\n\n    bytes.push(48 + num);\n    text += num.toString();\n  }\n\n  return { bytes, text };\n}\n\nconst AlphanumericCharacterCodes = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n  \" \",\n  \"$\",\n  \"%\",\n  \"*\",\n  \"+\",\n  \"-\",\n  \".\",\n  \"/\",\n  \":\",\n];\n\nfunction decodeAlphanumeric(stream: BitStream, size: number) {\n  const bytes: number[] = [];\n  let text = \"\";\n\n  const characterCountSize = [9, 11, 13][size];\n  let length = stream.readBits(\n    characterCountSize,\n    Mode.Alphanumeric,\n    StreamMapping.CharacterCountInfo,\n  );\n  while (length >= 2) {\n    const v = stream.readBits(11, Mode.Alphanumeric);\n\n    const a = Math.floor(v / 45);\n    const b = v % 45;\n\n    bytes.push(\n      AlphanumericCharacterCodes[a].charCodeAt(0),\n      AlphanumericCharacterCodes[b].charCodeAt(0),\n    );\n    text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];\n    length -= 2;\n  }\n\n  if (length === 1) {\n    const a = stream.readBits(6, Mode.Alphanumeric);\n    bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));\n    text += AlphanumericCharacterCodes[a];\n  }\n\n  return { bytes, text };\n}\n\nfunction decodeByte(stream: BitStream, size: number) {\n  const bytes: number[] = [];\n  let text = \"\";\n\n  const characterCountSize = [8, 16, 16][size];\n  const length = stream.readBits(\n    characterCountSize,\n    Mode.Byte,\n    StreamMapping.CharacterCountInfo,\n  );\n  for (let i = 0; i < length; i++) {\n    const b = stream.readBits(8, Mode.Byte);\n    bytes.push(b);\n  }\n  try {\n    text += decodeURIComponent(\n      bytes.map((b) => `%${(\"0\" + b.toString(16)).substr(-2)}`).join(\"\"),\n    );\n  } catch {\n    // failed to decode\n  }\n\n  return { bytes, text };\n}\n\nfunction decodeKanji(stream: BitStream, size: number) {\n  const bytes: number[] = [];\n\n  const characterCountSize = [8, 10, 12][size];\n  const length = stream.readBits(\n    characterCountSize,\n    Mode.Kanji,\n    StreamMapping.CharacterCountInfo,\n  );\n  for (let i = 0; i < length; i++) {\n    const k = stream.readBits(13, Mode.Kanji);\n\n    let c = (Math.floor(k / 0xc0) << 8) | k % 0xc0;\n    if (c < 0x1f00) {\n      c += 0x8140;\n    } else {\n      c += 0xc140;\n    }\n\n    bytes.push(c >> 8, c & 0xff);\n  }\n\n  const text = new TextDecoder(\"shift-jis\").decode(Uint8Array.from(bytes));\n  return { bytes, text };\n}\n\nexport function decode(data: Uint8ClampedArray, version: number): DecodedQR {\n  const stream = new BitStream(data);\n\n  // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).\n  const size = version <= 9 ? 0 : version <= 26 ? 1 : 2;\n\n  const result: DecodedQR = {\n    text: \"\",\n    bytes: [],\n    chunks: [],\n    version,\n    mirrored: false,\n    ecLevel: -1,\n    dataMask: -1,\n    streamMappings: null\n  };\n\n  while (stream.available() >= 4) {\n    const mode = stream.readBits(4, Mode.None, StreamMapping.Mode);\n    if (mode === ModeByte.Terminator) {\n      result.streamMappings = stream.getMappings();\n      return result;\n    } else if (mode === ModeByte.ECI) {\n      if (stream.readBits(1, Mode.ECI, StreamMapping.ECIData) === 0) {\n        result.chunks.push({\n          type: Mode.ECI,\n          assignmentNumber: stream.readBits(7, Mode.ECI),\n        });\n      } else if (stream.readBits(1, Mode.ECI, StreamMapping.ECIData) === 0) {\n        result.chunks.push({\n          type: Mode.ECI,\n          assignmentNumber: stream.readBits(14, Mode.ECI),\n        });\n      } else if (stream.readBits(1, Mode.ECI, StreamMapping.ECIData) === 0) {\n        result.chunks.push({\n          type: Mode.ECI,\n          assignmentNumber: stream.readBits(21, Mode.ECI),\n        });\n      } else {\n        // ECI data seems corrupted\n        result.chunks.push({\n          type: Mode.ECI,\n          assignmentNumber: -1,\n        });\n      }\n    } else if (mode === ModeByte.Numeric) {\n      const numericResult = decodeNumeric(stream, size);\n      result.text += numericResult.text;\n      result.bytes.push(...numericResult.bytes);\n      result.chunks.push({\n        type: Mode.Numeric,\n        text: numericResult.text,\n      });\n    } else if (mode === ModeByte.Alphanumeric) {\n      const alphanumericResult = decodeAlphanumeric(stream, size);\n      result.text += alphanumericResult.text;\n      result.bytes.push(...alphanumericResult.bytes);\n      result.chunks.push({\n        type: Mode.Alphanumeric,\n        text: alphanumericResult.text,\n      });\n    } else if (mode === ModeByte.Byte) {\n      const byteResult = decodeByte(stream, size);\n      result.text += byteResult.text;\n      result.bytes.push(...byteResult.bytes);\n      result.chunks.push({\n        type: Mode.Byte,\n        bytes: byteResult.bytes,\n        text: byteResult.text,\n      });\n    } else if (mode === ModeByte.Kanji) {\n      const kanjiResult = decodeKanji(stream, size);\n      result.text += kanjiResult.text;\n      result.bytes.push(...kanjiResult.bytes);\n      result.chunks.push({\n        type: Mode.Kanji,\n        bytes: kanjiResult.bytes,\n        text: kanjiResult.text,\n      });\n    } else if (mode === ModeByte.StructuredAppend) {\n      result.chunks.push({\n        type: Mode.StructuredAppend,\n        currentSequence: stream.readBits(4, Mode.StructuredAppend, StreamMapping.SACurrentSequence),\n        totalSequence: stream.readBits(4, Mode.StructuredAppend, StreamMapping.SATotalSequence),\n        parity: stream.readBits(8, Mode.StructuredAppend, StreamMapping.SAParity),\n      });\n    }\n  }\n\n  // If there is no data left, or the remaining bits are all 0, then that counts as a termination marker\n  if (\n    stream.available() === 0 ||\n    stream.readBits(stream.available(), Mode.None, StreamMapping.Padding) === 0\n  ) {\n    result.streamMappings = stream.getMappings();\n    return result;\n  }\n}\n"],"names":[],"mappings":"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"}