{"version":3,"file":"jsQR.js","sources":["../src/binarizer/index.ts","../src/extractor/index.ts","../src/index.ts"],"sourcesContent":["import { BitMatrix } from \"../BitMatrix\";\nimport { GreyscaleWeights } from \"../index\";\n\nconst REGION_SIZE = 8;\nconst MIN_DYNAMIC_RANGE = 24;\n\nfunction numBetween(value: number, min: number, max: number): number {\n  return value < min ? min : value > max ? max : value;\n}\n\n// Like BitMatrix but accepts arbitry Uint8 values\nclass Matrix {\n  private data: Uint8ClampedArray;\n  private width: number;\n  constructor(width: number, height: number, buffer?: Uint8ClampedArray) {\n    this.width = width;\n    const bufferSize = width * height;\n    if (buffer && buffer.length !== bufferSize) {\n      throw new Error(\"Wrong buffer size\");\n    }\n    this.data = buffer || new Uint8ClampedArray(bufferSize);\n  }\n  public get(x: number, y: number) {\n    return this.data[y * this.width + x];\n  }\n  public set(x: number, y: number, value: number) {\n    this.data[y * this.width + x] = value;\n  }\n}\n\nexport function binarize(\n  data: Uint8ClampedArray,\n  width: number,\n  height: number,\n  returnInverted: boolean,\n  greyscaleWeights: GreyscaleWeights,\n  canOverwriteImage: boolean,\n) {\n  const pixelCount = width * height;\n  if (data.length !== pixelCount * 4) {\n    throw new Error(\"Malformed data passed to binarizer.\");\n  }\n  // assign the greyscale and binary image within the rgba buffer as the rgba image will not be needed after conversion\n  let bufferOffset = 0;\n  // Convert image to greyscale\n  let greyscaleBuffer: Uint8ClampedArray;\n  if (canOverwriteImage) {\n    greyscaleBuffer = new Uint8ClampedArray(\n      data.buffer,\n      bufferOffset,\n      pixelCount,\n    );\n    bufferOffset += pixelCount;\n  }\n  const greyscalePixels = new Matrix(width, height, greyscaleBuffer);\n  if (greyscaleWeights.useIntegerApproximation) {\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const pixelPosition = (y * width + x) * 4;\n        const r = data[pixelPosition];\n        const g = data[pixelPosition + 1];\n        const b = data[pixelPosition + 2];\n        greyscalePixels.set(\n          x,\n          y,\n          // tslint:disable-next-line no-bitwise\n          (greyscaleWeights.red * r +\n            greyscaleWeights.green * g +\n            greyscaleWeights.blue * b +\n            128) >>\n            8,\n        );\n      }\n    }\n  } else {\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const pixelPosition = (y * width + x) * 4;\n        const r = data[pixelPosition];\n        const g = data[pixelPosition + 1];\n        const b = data[pixelPosition + 2];\n        greyscalePixels.set(\n          x,\n          y,\n          greyscaleWeights.red * r +\n            greyscaleWeights.green * g +\n            greyscaleWeights.blue * b,\n        );\n      }\n    }\n  }\n  const horizontalRegionCount = Math.ceil(width / REGION_SIZE);\n  const verticalRegionCount = Math.ceil(height / REGION_SIZE);\n  const blackPointsCount = horizontalRegionCount * verticalRegionCount;\n\n  let blackPointsBuffer: Uint8ClampedArray;\n  if (canOverwriteImage) {\n    blackPointsBuffer = new Uint8ClampedArray(\n      data.buffer,\n      bufferOffset,\n      blackPointsCount,\n    );\n    bufferOffset += blackPointsCount;\n  }\n  const blackPoints = new Matrix(\n    horizontalRegionCount,\n    verticalRegionCount,\n    blackPointsBuffer,\n  );\n  for (\n    let verticalRegion = 0;\n    verticalRegion < verticalRegionCount;\n    verticalRegion++\n  ) {\n    for (\n      let hortizontalRegion = 0;\n      hortizontalRegion < horizontalRegionCount;\n      hortizontalRegion++\n    ) {\n      let min = Infinity;\n      let max = 0;\n      for (let y = 0; y < REGION_SIZE; y++) {\n        for (let x = 0; x < REGION_SIZE; x++) {\n          const pixelLumosity = greyscalePixels.get(\n            hortizontalRegion * REGION_SIZE + x,\n            verticalRegion * REGION_SIZE + y,\n          );\n          min = Math.min(min, pixelLumosity);\n          max = Math.max(max, pixelLumosity);\n        }\n      }\n      // We could also compute the real average of all pixels but following the assumption that the qr code consists\n      // of bright and dark pixels and essentially not much in between, by (min + max)/2 we make the cut really between\n      // those two classes. If using the average over all pixel in a block of mostly bright pixels and few dark pixels,\n      // the avg would tend to the bright side and darker bright pixels could be interpreted as dark.\n      let average = (min + max) / 2;\n      // Small bias towards black by moving the threshold up. We do this, as in the finder patterns white holes tend\n      // to appear which makes them undetectable.\n      const blackBias = 1.11;\n      average = Math.min(255, average * blackBias);\n      if (max - min <= MIN_DYNAMIC_RANGE) {\n        // If variation within the block is low, assume this is a block with only light or only\n        // dark pixels. In that case we do not want to use the average, as it would divide this\n        // low contrast area into black and white pixels, essentially creating data out of noise.\n        //\n        // Default the blackpoint for these blocks to be half the min - effectively white them out\n        average = min / 2;\n\n        if (verticalRegion > 0 && hortizontalRegion > 0) {\n          // Correct the \"white background\" assumption for blocks that have neighbors by comparing\n          // the pixels in this block to the previously calculated black points. This is based on\n          // the fact that dark barcode symbology is always surrounded by some amount of light\n          // background for which reasonable black point estimates were made. The bp estimated at\n          // the boundaries is used for the interior.\n\n          // The (min < bp) is arbitrary but works better than other heuristics that were tried.\n          const averageNeighborBlackPoint =\n            (blackPoints.get(hortizontalRegion, verticalRegion - 1) +\n              2 * blackPoints.get(hortizontalRegion - 1, verticalRegion) +\n              blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) /\n            4;\n          if (min < averageNeighborBlackPoint) {\n            average = averageNeighborBlackPoint; // no need to apply black bias as already applied to neighbors\n          }\n        }\n      }\n      blackPoints.set(hortizontalRegion, verticalRegion, average);\n    }\n  }\n\n  let binarized: BitMatrix;\n  if (canOverwriteImage) {\n    const binarizedBuffer = new Uint8ClampedArray(\n      data.buffer,\n      bufferOffset,\n      pixelCount,\n    );\n    bufferOffset += pixelCount;\n    binarized = new BitMatrix(binarizedBuffer, width);\n  } else {\n    binarized = BitMatrix.createEmpty(width, height);\n  }\n\n  let inverted: BitMatrix = null;\n  if (returnInverted) {\n    if (canOverwriteImage) {\n      const invertedBuffer = new Uint8ClampedArray(\n        data.buffer,\n        bufferOffset,\n        pixelCount,\n      );\n      inverted = new BitMatrix(invertedBuffer, width);\n    } else {\n      inverted = BitMatrix.createEmpty(width, height);\n    }\n  }\n\n  for (\n    let verticalRegion = 0;\n    verticalRegion < verticalRegionCount;\n    verticalRegion++\n  ) {\n    for (\n      let hortizontalRegion = 0;\n      hortizontalRegion < horizontalRegionCount;\n      hortizontalRegion++\n    ) {\n      const left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);\n      const top = numBetween(verticalRegion, 2, verticalRegionCount - 3);\n      let sum = 0;\n      for (let xRegion = -2; xRegion <= 2; xRegion++) {\n        for (let yRegion = -2; yRegion <= 2; yRegion++) {\n          sum += blackPoints.get(left + xRegion, top + yRegion);\n        }\n      }\n      const threshold = sum / 25;\n      for (let xRegion = 0; xRegion < REGION_SIZE; xRegion++) {\n        for (let yRegion = 0; yRegion < REGION_SIZE; yRegion++) {\n          const x = hortizontalRegion * REGION_SIZE + xRegion;\n          const y = verticalRegion * REGION_SIZE + yRegion;\n          const lum = greyscalePixels.get(x, y);\n          binarized.set(x, y, lum <= threshold);\n          if (returnInverted) {\n            inverted.set(x, y, !(lum <= threshold));\n          }\n        }\n      }\n    }\n  }\n  if (returnInverted) {\n    return { binarized, inverted };\n  }\n  return { binarized };\n}\n","import { BitMatrix } from \"../BitMatrix\";\nimport { Point, QRLocation } from \"../locator\";\n\ninterface PerspectiveTransform {\n  a11: number;\n  a21: number;\n  a31: number;\n  a12: number;\n  a22: number;\n  a32: number;\n  a13: number;\n  a23: number;\n  a33: number;\n}\n\nfunction squareToQuadrilateral(\n  p1: Point,\n  p2: Point,\n  p3: Point,\n  p4: Point,\n): PerspectiveTransform {\n  const dx3 = p1.x - p2.x + p3.x - p4.x;\n  const dy3 = p1.y - p2.y + p3.y - p4.y;\n  if (dx3 === 0 && dy3 === 0) {\n    // Affine\n    return {\n      a11: p2.x - p1.x,\n      a12: p2.y - p1.y,\n      a13: 0,\n      a21: p3.x - p2.x,\n      a22: p3.y - p2.y,\n      a23: 0,\n      a31: p1.x,\n      a32: p1.y,\n      a33: 1,\n    };\n  } else {\n    const dx1 = p2.x - p3.x;\n    const dx2 = p4.x - p3.x;\n    const dy1 = p2.y - p3.y;\n    const dy2 = p4.y - p3.y;\n    const denominator = dx1 * dy2 - dx2 * dy1;\n    const a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\n    const a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\n    return {\n      a11: p2.x - p1.x + a13 * p2.x,\n      a12: p2.y - p1.y + a13 * p2.y,\n      a13,\n      a21: p4.x - p1.x + a23 * p4.x,\n      a22: p4.y - p1.y + a23 * p4.y,\n      a23,\n      a31: p1.x,\n      a32: p1.y,\n      a33: 1,\n    };\n  }\n}\n\nfunction quadrilateralToSquare(\n  p1: Point,\n  p2: Point,\n  p3: Point,\n  p4: Point,\n): PerspectiveTransform {\n  // Here, the adjoint serves as the inverse:\n  const sToQ = squareToQuadrilateral(p1, p2, p3, p4);\n  return {\n    a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,\n    a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,\n    a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,\n    a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,\n    a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,\n    a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,\n    a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,\n    a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,\n    a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21,\n  };\n}\n\nfunction times(\n  a: PerspectiveTransform,\n  b: PerspectiveTransform,\n): PerspectiveTransform {\n  return {\n    a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,\n    a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,\n    a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,\n    a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,\n    a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,\n    a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,\n    a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,\n    a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,\n    a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33,\n  };\n}\n\nexport function extract(image: BitMatrix, location: QRLocation) {\n  const qToS = quadrilateralToSquare(\n    { x: 3.5, y: 3.5 },\n    { x: location.dimension - 3.5, y: 3.5 },\n    { x: location.dimension - 6.5, y: location.dimension - 6.5 },\n    { x: 3.5, y: location.dimension - 3.5 },\n  );\n  const sToQ = squareToQuadrilateral(\n    location.topLeft,\n    location.topRight,\n    location.alignmentPattern,\n    location.bottomLeft,\n  );\n  const transform = times(sToQ, qToS);\n\n  const matrix = BitMatrix.createEmpty(location.dimension, location.dimension);\n  const mappingFunction = (x: number, y: number) => {\n    const denominator = transform.a13 * x + transform.a23 * y + transform.a33;\n    return {\n      x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,\n      y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator,\n    };\n  };\n\n  for (let y = 0; y < location.dimension; y++) {\n    for (let x = 0; x < location.dimension; x++) {\n      const xValue = x + 0.5;\n      const yValue = y + 0.5;\n      const sourcePixel = mappingFunction(xValue, yValue);\n      matrix.set(\n        x,\n        y,\n        image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)),\n      );\n    }\n  }\n\n  return {\n    matrix,\n    mappingFunction,\n  };\n}\n","import { binarize } from \"./binarizer\";\nimport { BitMatrix } from \"./BitMatrix\";\nimport { Chunks } from \"./decoder/decodeData\";\nimport { decode } from \"./decoder/decoder\";\nimport { Version } from \"./decoder/version\";\nimport { extract } from \"./extractor\";\nimport { locate, Point } from \"./locator\";\n\nexport interface QRCode {\n  binaryData: number[];\n  data: string;\n  chunks: Chunks;\n  version: number;\n  location: {\n    topRightCorner: Point;\n    topLeftCorner: Point;\n    bottomRightCorner: Point;\n    bottomLeftCorner: Point;\n\n    topRightFinderPattern: Point;\n    topLeftFinderPattern: Point;\n    bottomLeftFinderPattern: Point;\n\n    bottomRightAlignmentPattern?: Point;\n  };\n  matrix: BitMatrix;\n  matrixCorrected: BitMatrix;\n}\n\nfunction scan(matrix: BitMatrix): QRCode | null {\n  const locations = locate(matrix);\n  if (!locations) {\n    return null;\n  }\n\n  for (const location of locations) {\n    const extracted = extract(matrix, location);\n    const matrixOrig = new BitMatrix(\n      extracted.matrix.data,\n      extracted.matrix.width,\n    );\n    const decoded = decode(extracted.matrix);\n    if (decoded) {\n      const topRight = decoded.mirrored\n        ? extracted.mappingFunction(0, location.dimension)\n        : extracted.mappingFunction(location.dimension, 0);\n      const bottomLeft = decoded.mirrored\n        ? extracted.mappingFunction(location.dimension, 0)\n        : extracted.mappingFunction(0, location.dimension);\n      return {\n        binaryData: decoded.bytes,\n        data: decoded.text,\n        chunks: decoded.chunks,\n        version: decoded.version,\n        location: {\n          topRightCorner: topRight,\n          topLeftCorner: extracted.mappingFunction(0, 0),\n          bottomRightCorner: extracted.mappingFunction(\n            location.dimension,\n            location.dimension,\n          ),\n          bottomLeftCorner: bottomLeft,\n\n          topRightFinderPattern: location.topRight,\n          topLeftFinderPattern: location.topLeft,\n          bottomLeftFinderPattern: location.bottomLeft,\n\n          bottomRightAlignmentPattern: location.alignmentPattern,\n        },\n        matrix: matrixOrig,\n        matrixCorrected: extracted.matrix,\n      };\n    }\n  }\n  return null;\n}\n\nexport interface Options {\n  inversionAttempts?:\n    | \"dontInvert\"\n    | \"onlyInvert\"\n    | \"attemptBoth\"\n    | \"invertFirst\";\n  greyScaleWeights?: GreyscaleWeights;\n  canOverwriteImage?: boolean;\n}\n\nexport interface GreyscaleWeights {\n  red: number;\n  green: number;\n  blue: number;\n  useIntegerApproximation?: boolean;\n}\n\nconst defaultOptions: Options = {\n  inversionAttempts: \"attemptBoth\",\n  greyScaleWeights: {\n    red: 0.2126,\n    green: 0.7152,\n    blue: 0.0722,\n    useIntegerApproximation: false,\n  },\n  canOverwriteImage: true,\n};\n\nfunction mergeObject(target: any, src: any) {\n  Object.keys(src).forEach((opt) => {\n    // Sad implementation of Object.assign since we target es5 not es6\n    target[opt] = src[opt];\n  });\n}\n\nfunction jsQR(\n  data: Uint8ClampedArray,\n  width: number,\n  height: number,\n  providedOptions: Options = {},\n): QRCode | null {\n  const options = Object.create(null);\n  Object.assign(options, defaultOptions);\n  Object.assign(options, providedOptions);\n  // mergeObject(options, defaultOptions);\n  // mergeObject(options, providedOptions);\n\n  const tryInvertedFirst =\n    options.inversionAttempts === \"onlyInvert\" ||\n    options.inversionAttempts === \"invertFirst\";\n  const shouldInvert =\n    options.inversionAttempts === \"attemptBoth\" || tryInvertedFirst;\n  const { binarized, inverted } = binarize(\n    data,\n    width,\n    height,\n    shouldInvert,\n    options.greyScaleWeights,\n    options.canOverwriteImage,\n  );\n  let result = scan(tryInvertedFirst ? inverted : binarized);\n  if (\n    !result &&\n    (options.inversionAttempts === \"attemptBoth\" ||\n      options.inversionAttempts === \"invertFirst\")\n  ) {\n    result = scan(tryInvertedFirst ? binarized : inverted);\n  }\n  return result;\n}\n\n(jsQR as any).default = jsQR;\nexport default jsQR;\n"],"names":[],"mappings":"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"}